[
    {
        "id": "2131b817f896fa4e",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41fcb1de.41a6e8",
        "type": "http response",
        "z": "2131b817f896fa4e",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1560,
        "y": 360,
        "wires": []
    },
    {
        "id": "ff6d71ff.74e5b",
        "type": "http in",
        "z": "2131b817f896fa4e",
        "name": "HTTP Input \"POST\"",
        "url": "/api/qtserver/*",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "1d9e4863.23e26f"
            ]
        ]
    },
    {
        "id": "1d9e4863.23e26f",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Parse Request",
        "func": "var parts = msg.req.url.split(\"/\");\nvar endpoint = parts[3];\nvar requestData = msg.payload;\n\n// Input validation\nswitch (endpoint) {\n    case \"checkCredentials\":\n        if (!requestData.username || !requestData.password) {\n            return { error: \"Username and password are required\" };\n        }\n        break;\n    case \"getAccountNumberByUsername\":\n        if (!requestData.username) {\n            return { error: \"Username is required\" };\n        }\n        break;\n    case \"getAccountBalanceByNumber\":\n        if (!requestData.accountNumber) {\n            return { error: \"Account number is required\" };\n        }\n        break;\n    case \"getTransactionHistoryByNumber\":\n        if (!requestData.accountNumber) {\n            return { error: \"Account number is required\" };\n        }\n        break;\n    case \"makeTransaction\":\n        if (!requestData.accountNumber || !requestData.amount) {\n            return { error: \"Account number and amount are required\" };\n        }\n        break;\n    case \"makeTransfer\":\n        if (!requestData.from_account_number || !requestData.to_account_number || !requestData.transfer_amount) {\n            return { error: \"From account number, to account number, and transfer amount are required\" };\n        }\n        break;\n    case \"getBankDatabase\":\n        // No specific validation required for this endpoint\n        break;\n    case \"createNewUser\":\n        if (!requestData.username || !requestData.password || !requestData.fullname || !requestData.age) {\n            return { error: \"Username, password, fullname, and age are required for creating a new user\" };\n        }\n        break;\n    case \"deleteUser\":\n        if (!requestData.username) {\n            return { error: \"Username is required\" };\n        }\n        break;\n    case \"updateUser\":\n        if (!requestData.username || !requestData.password || !requestData.fullname || !requestData.age) {\n            return { error: \"Username, password, fullname, and age are required for updating a user\" };\n        }\n        break;\n    case \"checkAdminPrivileges\":\n        if (!requestData.username) {\n            return { error: \"Username is required\" };\n        }\n        break;\n    default:\n        return { error: \"Invalid endpoint\" };\n}\n\n// If all validation passes, return the endpoint and requestData\nreturn { endpoint: endpoint, requestData: requestData };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 360,
        "wires": [
            [
                "6773f804.8a78fc",
                "f3da45df01a717be"
            ]
        ]
    },
    {
        "id": "6773f804.8a78fc",
        "type": "switch",
        "z": "2131b817f896fa4e",
        "name": "Route Requests",
        "property": "endpoint",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "checkCredentials",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getAccountNumberByUsername",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getAccountBalanceByNumber",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getTransactionHistoryByNumber",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "makeTransaction",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "makeTransfer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getBankDatabase",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "createNewUser",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deleteUser",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "updateUser",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "checkAdminPrivileges",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 11,
        "x": 620,
        "y": 360,
        "wires": [
            [
                "a495ff0c.86b9c8"
            ],
            [
                "d2204238.2c3fb8"
            ],
            [
                "fb44ab30.7deaf8"
            ],
            [
                "275d6466.85d65c"
            ],
            [
                "c8fd47f8.f16a5"
            ],
            [
                "b92423d0.a7a318"
            ],
            [
                "6dcd8160.87dd78"
            ],
            [
                "2f0e0ef6.0ccf14"
            ],
            [
                "2b4c1dfb947ef70b"
            ],
            [
                "e5722f06b1af99bb"
            ],
            [
                "86e2479a0a9f36d0"
            ]
        ]
    },
    {
        "id": "a495ff0c.86b9c8",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Check Credentials",
        "func": "var username = msg.requestData.username;\nvar password = msg.requestData.password;\n\nvar query = \"SELECT role FROM user WHERE username = ? AND password = ?\";\n\n// Execute the query\ncontext.global.mysql.query(query, [username, password], function(error, results, fields) {\n    if (error) {\n        console.error('Error checking credentials:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while checking credentials' };\n        node.send(msg);\n    } else {\n        // Check if the credentials are valid\n        if (results.length > 0) {\n            var role = results[0].role;\n            msg.payload = { isAuthenticated: true, role: role };\n            node.send(msg);\n        } else {\n            console.error('Invalid username or password');\n            msg.statusCode = 401; // Unauthorized\n            msg.payload = { error: 'Invalid username or password' };\n            node.send(msg);\n        }\n    }\n});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 40,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "d2204238.2c3fb8",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Get Account Number",
        "func": "var query = \"SELECT account_number FROM user WHERE username = ?\";\n\n// Execute the query\ncontext.global.mysql.query(query, [username], function(error, results, fields) {\n    if (error) {\n        console.error('Error retrieving account number:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while retrieving account number' };\n        node.send(msg);\n    } else {\n        // Check if the username exists\n        if (results.length > 0) {\n            var accountNumber = results[0].account_number;\n            msg.payload = { accountNumber: accountNumber };\n            node.send(msg);\n        } else {\n            console.error('Username not found');\n            msg.statusCode = 404; // Not Found\n            msg.payload = { error: 'Username not found' };\n            node.send(msg);\n        }\n    }\n});",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 100,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "fb44ab30.7deaf8",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Get Account Balance",
        "func": "var accountNumber = msg.requestData.accountNumber;\n\n// Your code for getting account balance by number here\nvar query = \"SELECT balance FROM user WHERE account_number = ?\";\n\n// Execute the query\ncontext.global.mysql.query(query, [accountNumber], function(error, results, fields) {\n    if (error) {\n        console.error('Error getting account balance:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while getting account balance' };\n        node.send(msg);\n    } else {\n        // Check if the account balance is found\n        if (results.length > 0) {\n            var balance = results[0].balance;\n            msg.payload = { balance: balance };\n            node.send(msg);\n        } else {\n            console.error('Account number not found:', accountNumber);\n            msg.statusCode = 404; // Not Found\n            msg.payload = { error: 'Account number not found' };\n            node.send(msg);\n        }\n    }\n});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 160,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "275d6466.85d65c",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Get Transaction History",
        "func": "var accountNumber = msg.requestData.accountNumber;\nvar count = msg.requestData.count;\n\n// Your code for getting transaction history by number here\nvar query = \"SELECT transaction_time, transaction_amount FROM transaction_history WHERE account_number = ? ORDER BY transaction_time DESC LIMIT ?\";\n\n// Execute the query\ncontext.global.mysql.query(query, [accountNumber, count], function(error, results, fields) {\n    if (error) {\n        console.error('Error getting transaction history:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while getting transaction history' };\n        node.send(msg);\n    } else {\n        // Check if any transactions are found\n        if (results.length > 0) {\n            var history = results.map(function(transaction) {\n                return `${transaction.transaction_time}: $${transaction.transaction_amount}`;\n            });\n            msg.payload = { history: history.join('\\n') };\n            node.send(msg);\n        } else {\n            console.error('No transaction history found for account number:', accountNumber);\n            msg.statusCode = 404; // Not Found\n            msg.payload = { error: 'No transaction history found' };\n            node.send(msg);\n        }\n    }\n});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 220,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "c8fd47f8.f16a5",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Make Transaction",
        "func": "var accountNumber = msg.requestData.accountNumber;\nvar amount = msg.requestData.amount;\n\n// Your code for making transaction here\nvar query = \"UPDATE user SET balance = balance - ? WHERE account_number = ?\";\n\n// Execute the query to deduct the amount from the account balance\ncontext.global.mysql.query(query, [amount, accountNumber], function(error, results, fields) {\n    if (error) {\n        console.error('Error deducting amount from account balance:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while making the transaction' };\n        node.send(msg);\n    } else {\n        if (results.affectedRows === 0) {\n            console.error('No user found with account number:', accountNumber);\n            msg.statusCode = 404; // Not Found\n            msg.payload = { error: 'Account number not found' };\n            node.send(msg);\n        } else {\n            // Insert transaction history\n            var insertQuery = \"INSERT INTO transaction_history (account_number, transaction_time, transaction_amount) VALUES (?, NOW(), ?)\";\n            context.global.mysql.query(insertQuery, [accountNumber, -amount], function(error, results, fields) {\n                if (error) {\n                    console.error('Error inserting transaction history:', error);\n                    msg.statusCode = 500; // Internal Server Error\n                    msg.payload = { error: 'An error occurred while making the transaction' };\n                    node.send(msg);\n                } else {\n                    msg.payload = { success: true };\n                    node.send(msg);\n                }\n            });\n        }\n    }\n});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "b92423d0.a7a318",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Make Transfer",
        "func": "var from_account_number = msg.requestData.from_account_number;\nvar to_account_number = msg.requestData.to_account_number;\nvar transfer_amount = msg.requestData.transfer_amount;\n\n// Check if the source account exists and has enough balance\nvar checkBalanceQuery = \"SELECT balance FROM user WHERE account_number = ?\";\ncontext.global.mysql.query(checkBalanceQuery, [from_account_number], function(error, results, fields) {\n    if (error) {\n        console.error('Error checking balance for source account:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while making the transfer' };\n        node.send(msg);\n    } else {\n        if (results.length === 0) {\n            console.error('Source account does not exist:', from_account_number);\n            msg.statusCode = 404; // Not Found\n            msg.payload = { error: 'Source account does not exist' };\n            node.send(msg);\n        } else {\n            var from_balance = results[0].balance;\n            if (from_balance < transfer_amount) {\n                console.error('Insufficient funds in source account:', from_account_number);\n                msg.statusCode = 400; // Bad Request\n                msg.payload = { error: 'Insufficient funds' };\n                node.send(msg);\n            } else {\n                // Deduct from source account\n                var updateFromAccountQuery = \"UPDATE user SET balance = balance - ? WHERE account_number = ?\";\n                context.global.mysql.query(updateFromAccountQuery, [transfer_amount, from_account_number], function(error, results, fields) {\n                    if (error) {\n                        console.error('Error deducting amount from source account:', error);\n                        msg.statusCode = 500; // Internal Server Error\n                        msg.payload = { error: 'An error occurred while making the transfer' };\n                        node.send(msg);\n                    } else {\n                        // Add to destination account\n                        var updateToAccountQuery = \"UPDATE user SET balance = balance + ? WHERE account_number = ?\";\n                        context.global.mysql.query(updateToAccountQuery, [transfer_amount, to_account_number], function(error, results, fields) {\n                            if (error) {\n                                console.error('Error adding amount to destination account:', error);\n                                msg.statusCode = 500; // Internal Server Error\n                                msg.payload = { error: 'An error occurred while making the transfer' };\n                                node.send(msg);\n                            } else {\n                                // Insert transaction history for source account\n                                var insertTransactionQuery = \"INSERT INTO transaction_history (account_number, transaction_time, transaction_amount) VALUES (?, NOW(), ?)\";\n                                context.global.mysql.query(insertTransactionQuery, [from_account_number, -transfer_amount], function(error, results, fields) {\n                                    if (error) {\n                                        console.error('Error inserting transaction history for source account:', error);\n                                        msg.statusCode = 500; // Internal Server Error\n                                        msg.payload = { error: 'An error occurred while making the transfer' };\n                                        node.send(msg);\n                                    } else {\n                                        // Insert transaction history for destination account\n                                        context.global.mysql.query(insertTransactionQuery, [to_account_number, transfer_amount], function(error, results, fields) {\n                                            if (error) {\n                                                console.error('Error inserting transaction history for destination account:', error);\n                                                msg.statusCode = 500; // Internal Server Error\n                                                msg.payload = { error: 'An error occurred while making the transfer' };\n                                                node.send(msg);\n                                            } else {\n                                                msg.payload = { success: true };\n                                                node.send(msg);\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n            }\n        }\n    }\n});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 340,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "6dcd8160.87dd78",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Get Bank Database",
        "func": "// Your code for getting the bank database here\nvar getBankDatabaseQuery = \"SELECT * FROM user\";\n\ncontext.global.mysql.query(getBankDatabaseQuery, function(error, results, fields) {\n    if (error) {\n        console.error('Error retrieving bank database:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while retrieving bank database' };\n        node.send(msg);\n    } else {\n        msg.payload = { bankDatabase: results };\n        node.send(msg);\n    }\n});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 400,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "2f0e0ef6.0ccf14",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Create New User",
        "func": "var username = msg.requestData.username;\nvar password = msg.requestData.password;\nvar fullname = msg.requestData.fullname;\nvar age = msg.requestData.age;\n\n// Your code for creating a new user here\nvar createUserQuery = `INSERT INTO user (username, password, fullname, age) VALUES (?, ?, ?, ?)`;\nvar createUserValues = [username, password, fullname, age];\n\ncontext.global.mysql.query(createUserQuery, createUserValues, function(error, results, fields) {\n    if (error) {\n        console.error('Error creating new user:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while creating a new user' };\n        node.send(msg);\n    } else {\n        msg.payload = { success: true };\n        node.send(msg);\n    }\n});\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 460,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "2b4c1dfb947ef70b",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Delete User",
        "func": "var username = msg.requestData.username;\n\n// Your code for deleting a user here\nvar deleteUserQuery = `DELETE FROM user WHERE username = ?`;\nvar deleteUserValues = [username];\n\ncontext.global.mysql.query(deleteUserQuery, deleteUserValues, function(error, results, fields) {\n    if (error) {\n        console.error('Error deleting user:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while deleting the user' };\n        node.send(msg);\n    } else {\n        // Check if any rows were affected\n        if (results.affectedRows === 0) {\n            msg.statusCode = 404; // Not Found\n            msg.payload = { error: 'User not found' };\n            node.send(msg);\n        } else {\n            msg.payload = { success: true };\n            node.send(msg);\n        }\n    }\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "e5722f06b1af99bb",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Update User",
        "func": "var username = msg.requestData.username;\nvar password = msg.requestData.password;\nvar fullname = msg.requestData.fullname;\nvar age = msg.requestData.age;\n\n// Your code for updating a user here\nvar updateUserQuery = `UPDATE user SET password = ?, fullname = ?, age = ? WHERE username = ?`;\nvar updateUserValues = [password, fullname, age, username];\n\ncontext.global.mysql.query(updateUserQuery, updateUserValues, function(error, results, fields) {\n    if (error) {\n        console.error('Error updating user:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while updating the user' };\n        node.send(msg);\n    } else {\n        // Check if any rows were affected\n        if (results.affectedRows === 0) {\n            msg.statusCode = 404; // Not Found\n            msg.payload = { error: 'User not found' };\n            node.send(msg);\n        } else {\n            msg.payload = { success: true };\n            node.send(msg);\n        }\n    }\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 580,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "86e2479a0a9f36d0",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Check Admin Privileges",
        "func": "var username = msg.requestData.username;\n\n// Your code for checking admin privileges here\nvar checkAdminQuery = `SELECT role FROM user WHERE username = ?`;\nvar checkAdminValues = [username];\n\ncontext.global.mysql.query(checkAdminQuery, checkAdminValues, function(error, results, fields) {\n    if (error) {\n        console.error('Error checking admin privileges:', error);\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'An error occurred while checking admin privileges' };\n        node.send(msg);\n    } else {\n        if (results.length === 0) {\n            msg.statusCode = 404; // Not Found\n            msg.payload = { error: 'User not found' };\n            node.send(msg);\n        } else {\n            var isAdmin = results[0].role === 'admin';\n            msg.payload = { isAdmin: isAdmin };\n            node.send(msg);\n        }\n    }\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 640,
        "wires": [
            [
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "b1ebbc44c8086068",
        "type": "mysql",
        "z": "2131b817f896fa4e",
        "mydb": "c9d4197e92e2efe6",
        "name": "MySQL",
        "x": 1240,
        "y": 360,
        "wires": [
            [
                "41fcb1de.41a6e8",
                "0cc8e0637f693f96"
            ]
        ]
    },
    {
        "id": "f3da45df01a717be",
        "type": "debug",
        "z": "2131b817f896fa4e",
        "name": "Debug Parsed Request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 520,
        "wires": []
    },
    {
        "id": "0cc8e0637f693f96",
        "type": "debug",
        "z": "2131b817f896fa4e",
        "name": "Debug Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 180,
        "wires": []
    },
    {
        "id": "eacc1477fb0b2e79",
        "type": "inject",
        "z": "2131b817f896fa4e",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "8758cb7a05bb356f"
            ]
        ]
    },
    {
        "id": "8758cb7a05bb356f",
        "type": "file in",
        "z": "2131b817f896fa4e",
        "name": "Read JSON File",
        "filename": "C:\\Users\\Mostafa Ashraf\\.node-red\\users.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 340,
        "y": 660,
        "wires": [
            [
                "6e17ef89102ed0f8",
                "b1c193cf7b764128"
            ]
        ]
    },
    {
        "id": "b1c193cf7b764128",
        "type": "debug",
        "z": "2131b817f896fa4e",
        "name": "Read JSON File",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 800,
        "wires": []
    },
    {
        "id": "6e17ef89102ed0f8",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Parses Incoming JSON Payload",
        "func": "var jsonData = JSON.parse(msg.payload);\nmsg.payload = jsonData;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 720,
        "wires": [
            [
                "283df797119e06ae",
                "e1455b7cad7d2d98"
            ]
        ]
    },
    {
        "id": "283df797119e06ae",
        "type": "debug",
        "z": "2131b817f896fa4e",
        "name": "Debug Parsed Incoming JSON Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 800,
        "wires": []
    },
    {
        "id": "e1455b7cad7d2d98",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Parse JSON Data",
        "func": "// Assuming jsonData is an array containing the JSON data from the file\nvar jsonData = msg.payload; // Assuming the JSON data is passed as payload\n\n// Initialize an empty array to store individual insertion messages\nvar insertionMessages = [];\n\n// Loop through the JSON array\njsonData.forEach(function(item) {\n    // Extract relevant information from each JSON object for the 'user' table\n    var userInsertionQuery = `\n        INSERT INTO user \n        (username, password, account_number, fullname, balance, age, role) \n        VALUES \n        ('${item.username}', '${item.password}', '${item.account_number}', '${item.fullname}', ${item.balance}, ${item.age}, '${item.role}')\n    `;\n\n    // Create a message object with the insertion query for the 'user' table\n    var userInsertionMessage = {\n        topic: \"MySQL Insertion\", // Topic for routing to the MySQL node\n        payload: userInsertionQuery // MySQL query to be executed\n    };\n\n    // Push the message object into the array\n    insertionMessages.push(userInsertionMessage);\n\n    // Construct insertion message for the 'transaction_history' table\n    var transactionHistoryInsertionQuery = `\n        INSERT INTO transaction_history \n        (account_number, transaction_time, transaction_amount) \n        VALUES \n        ('${item.account_number}', NOW(), ${item.balance})\n    `;\n\n    // Create a message object with the insertion query for the 'transaction_history' table\n    var transactionHistoryInsertionMessage = {\n        topic: \"MySQL Insertion\", // Topic for routing to the MySQL node\n        payload: transactionHistoryInsertionQuery // MySQL query to be executed\n    };\n\n    // Push the message object into the array\n    insertionMessages.push(transactionHistoryInsertionMessage);\n});\n\n// Now insertionMessages array contains individual insertion messages for each data entry\n// You can use this array in your Node-RED flow to pass each insertion message to the MySQL node\nreturn insertionMessages;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 740,
        "wires": [
            [
                "8f99d54e9f019238",
                "9a1d8e7633aae10f"
            ]
        ]
    },
    {
        "id": "9a1d8e7633aae10f",
        "type": "split",
        "z": "2131b817f896fa4e",
        "name": "Split JSON Array",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1250,
        "y": 640,
        "wires": [
            [
                "57c85da973bd5bae"
            ]
        ]
    },
    {
        "id": "8f99d54e9f019238",
        "type": "debug",
        "z": "2131b817f896fa4e",
        "name": "Debug Parsed JSON Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 740,
        "wires": []
    },
    {
        "id": "9278f62b9c15bd2e",
        "type": "debug",
        "z": "2131b817f896fa4e",
        "name": "Debug Constructed SQL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 540,
        "wires": []
    },
    {
        "id": "57c85da973bd5bae",
        "type": "function",
        "z": "2131b817f896fa4e",
        "name": "Construct SQL",
        "func": "var item = msg.payload;\n\n// Construct SQL INSERT statement for the 'user' table\nvar userSql = `\n    INSERT INTO user (username, password, account_number, fullname, balance, age, role) \n    VALUES ('${item.username}', '${item.password}', '${item.account_number}', '${item.fullname}', ${item.balance}, ${item.age}, '${item.role}')\n`;\n\n// Construct SQL INSERT statement for the 'transaction_history' table\nvar transactionHistorySql = `\n    INSERT INTO transaction_history (account_number, transaction_time, transaction_amount) \n    VALUES ('${item.account_number}', NOW(), ${item.balance})\n`;\n\n// Construct a single string containing both SQL queries\nvar sqlQueries = userSql + ';' + transactionHistorySql;\n\n// Pass the concatenated SQL queries to the next node (MySQL node)\nreturn { payload: sqlQueries };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 540,
        "wires": [
            [
                "9278f62b9c15bd2e",
                "b1ebbc44c8086068"
            ]
        ]
    },
    {
        "id": "0eece3d72b4f84a3",
        "type": "http in",
        "z": "2131b817f896fa4e",
        "name": "HTTP Input \"GET\"",
        "url": "/api/qtserver/*",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "1d9e4863.23e26f"
            ]
        ]
    },
    {
        "id": "c9d4197e92e2efe6",
        "type": "MySQLdatabase",
        "name": "bank_database",
        "host": "localhost",
        "port": "3306",
        "db": "bank_database",
        "tz": "",
        "charset": "UTF8"
    }
]